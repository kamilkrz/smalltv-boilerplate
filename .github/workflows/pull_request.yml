name: Pull Request CI
permissions:
  contents: read
  pull-requests: write
  id-token: write
on:
  pull_request:
    branches: [main]
env:
  PLATFORMIO_BUILD_FILE: platformio-build.output
  PLATFORMIO_BUILD_STDOUTERR_FILE: platformio-build.stdouterr
  COVERXYGEN_OUTPUT_FILE: coverxygen.output
  GITHUB_WORKFLOW_RUN_URL: >-
    ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install Coverxygen
        run: pip install --upgrade coverxygen
      - name: Build PlatformIO Project
        run: pio run 2> >(tee "${PLATFORMIO_BUILD_STDOUTERR_FILE}" >&2) | tee "${PLATFORMIO_BUILD_FILE}"
      - name: Generate docs for xml evaluation
        uses: mattnotmitt/doxygen-action@v1.12.0
        with:
          doxyfile-path: documentation/Doxyfile
      - name: Generate Coverxygen Markdown Summary
        run: |
          python3 -m coverxygen --xml-dir docs/xml --src-dir . --exclude README.md --output "${COVERXYGEN_OUTPUT_FILE}" --format markdown-summary
      - name: Post build output as PR comment
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const readBuildOutput = (filePath) => fs.readFileSync(filePath, 'utf8');
            const buildOutputFile = process.env.PLATFORMIO_BUILD_FILE;
            const buildStdOutErrFile = process.env.PLATFORMIO_BUILD_STDOUTERR_FILE;

            let buildOutput = readBuildOutput(buildOutputFile);
            let cutIndex = buildOutput.lastIndexOf('\nEnvironment');

            if (cutIndex === -1) {
              buildOutput = readBuildOutput(buildStdOutErrFile);
              cutIndex = buildOutput.lastIndexOf('\nEnvironment');
            }
            const githubWorkflowRunUrl = process.env.GITHUB_WORKFLOW_RUN_URL;
            const githubRunNumber = process.env.GITHUB_RUN_NUMBER;
            const githubRunAttempt = process.env.GITHUB_RUN_ATTEMPT;
            const outcomeEmoji = (outcome) => {
              switch (outcome) {
                case 'SUCCESS': return ':white_check_mark:';
                case 'FAILED': return ':x:';
                default: return outcome;
              }
            };

            const filteredOutput = cutIndex !== -1 ? buildOutput.slice(cutIndex + 1) : buildOutput;
            const lines = filteredOutput.split('\n').filter(line => line.trim() !== '');
            const tableHeader = '| Environment | Status | Duration |';
            const tableRows = lines.slice(1, -1).map(line => {
              const columns = line.split(/\s{2,}/).map(col => col.trim());
              columns[1] = outcomeEmoji(columns[1]);
              return `| ${columns.join(' | ')} |`;
            });
            const markdownTable = [tableHeader, ...tableRows].join('\n');
            const summaryLine = buildOutput.split('\n')
              .find(line => line.startsWith('=') && line.includes(' in '))
              ?.replace(/=/g, '').trim();

            const decoratedSummaryLine = summaryLine?.includes('failed')
              ? `:rotating_light: ${summaryLine} :rotating_light:`
              : summaryLine?.includes('succeeded')
              ? `:sparkles: ${summaryLine} :sparkles:`
              : summaryLine;

            const buildLink = `[View Workflow Run #${githubRunNumber} (Attempt ${githubRunAttempt})](${githubWorkflowRunUrl})`;
            const commentHeader = '### :rocket: Build Output :rocket:\n\n**Summary:**\n';
            const commentBody = `${commentHeader}${decoratedSummaryLine}\n\n${markdownTable}\n\n${buildLink}\n`;
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.startsWith(commentHeader)
            );
            if (existingComment) {
              await github.rest.issues.updateComment({
                  ...context.repo,
                  comment_id: existingComment.id,
                  body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: commentBody
              });
            }
      - name: Post Coverxygen summary as PR comment
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const coverxygenFile = process.env.COVERXYGEN_OUTPUT_FILE;
            let coverxygenOutput = '';
            try {
              coverxygenOutput = fs.readFileSync(coverxygenFile, 'utf8');
            } catch (e) {
              coverxygenOutput = ':warning: No Coverxygen output found.';
            }

            // Colorize coverage percentages using LaTeX color hack
            function colorizeCoverage(text) {
              // Match percentages like 45%, 100%, 22.5%, 0.0%, etc.
              return text.replace(/(\d{1,3}(?:\.\d+)?)%/g, function(match, p1) {
                const percent = parseFloat(p1);
                let color = 'red';
                if (percent >= 67) color = 'green';
                else if (percent >= 34) color = 'yellow';
                // Double escape percent for LaTeX: 45% -> 45\%
                const latexPercent = match.replace('%', '\\\\%');
                return '$${\\color{' + color + '}' + latexPercent + '}$$';
              });
            }

            const commentHeader = '### :bar_chart: Documentation Coverage Summary :bar_chart:\n\n';
            const coloredOutput = colorizeCoverage(coverxygenOutput);
            const commentBody = commentHeader + coloredOutput + '\n';
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.startsWith(commentHeader)
            );
            if (existingComment) {
              await github.rest.issues.updateComment({
                  ...context.repo,
                  comment_id: existingComment.id,
                  body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: commentBody
              });
            }
      - name: Post warnings/errors as PR comment
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const buildOutput = fs.readFileSync(process.env.PLATFORMIO_BUILD_STDOUTERR_FILE, 'utf8');
            const cutIndex = buildOutput.lastIndexOf('\nEnvironment');
            const filteredOutput = cutIndex !== -1 ? buildOutput.slice(0, cutIndex) : buildOutput;

            const warningErrorLines = filteredOutput.split('\n').filter(line =>  
              (
                !line.match(/Cloning into/) // Exclude GHA output
              ) 
            );
            let header = '### :boom: Warnings/Errors :boom: \n\n';
            let commentBody = header;
            let currentDevice = null;
            let pendingEnvironment = null;

            warningErrorLines.forEach((line, index) => {
              if (line.startsWith('In file included')) {
                // Look ahead to find the environment
                for (let i = index + 1; i < warningErrorLines.length; i++) {
                  const match = warningErrorLines[i].match(/\.pio\/libdeps\/([^\/]+)\//); // Extract environment name
                  if (match) {
                    pendingEnvironment = match[1];
                    break;
                  }
                }
              }

              const match = line.match(/\.pio\/libdeps\/([^\/]+)\//); // Extract environment name
              const device = match ? match[1] : pendingEnvironment;

              if (device && device !== currentDevice) {
                if (currentDevice !== null) {
                  commentBody += '```\n\n'; // Close the previous code block
                }
                commentBody += `#### Environment: ${device}\n\n\`\`\`\n`;
                currentDevice = device;
                pendingEnvironment = null; // Reset pending environment
              }

              commentBody += `${line}\n`; // Add the line to the current block
            });

            if (currentDevice !== null) {
              commentBody += '```\n\n'; // Close the last code block
            }

            if (commentBody.trim() === header.trim()) {
              commentBody += ':tada: No warnings or errors found. Everything is good to go! :tada:\n';
            }

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.startsWith(header)
            );
            if (existingComment) {
              await github.rest.issues.updateComment({
                  ...context.repo,
                  comment_id: existingComment.id,
                  body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: commentBody
              });
            }
      - name: Publish GitHub Actions Job Summary
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const readBuildOutput = (filePath) => fs.readFileSync(filePath, 'utf8');
            const buildOutputFile = process.env.PLATFORMIO_BUILD_FILE;
            const buildStdOutErrFile = process.env.PLATFORMIO_BUILD_STDOUTERR_FILE;
            const githubRunAttempt = process.env.GITHUB_RUN_ATTEMPT;
            const outcomeEmoji = (outcome) => {
              switch (outcome) {
                case 'SUCCESS': return ':white_check_mark:';
                case 'FAILED': return ':x:';
                default: return outcome;
              }
            };
            let buildOutput = readBuildOutput(buildOutputFile);
            let cutIndex = buildOutput.lastIndexOf('\nEnvironment');

            if (cutIndex === -1) {
              buildOutput = readBuildOutput(buildStdOutErrFile);
              cutIndex = buildOutput.lastIndexOf('\nEnvironment');
            }

            const filteredOutput = cutIndex !== -1 ? buildOutput.slice(cutIndex + 1) : buildOutput;
            const lines = filteredOutput.split('\n').filter(line => line.trim() !== '');
            const tableHeader = '| Environment | Status | Duration |';
            const tableRows = lines.slice(1, -1).map(line => {
              const columns = line.split(/\s{2,}/).map(col => col.trim());
              columns[1] = outcomeEmoji(columns[1]);
              return `| ${columns.join(' | ')} |`;
            });
            const markdownTable = [tableHeader, ...tableRows].join('\n');
            const summaryLine = buildOutput.split('\n')
              .find(line => line.startsWith('=') && line.includes(' in '))
              ?.replace(/=/g, '').trim();

            const decoratedSummaryLine = summaryLine?.includes('failed')
              ? `:rotating_light: ${summaryLine} :rotating_light:`
              : summaryLine?.includes('succeeded')
              ? `:sparkles: ${summaryLine} :sparkles:`
              : summaryLine;

            const buildInfo = `(Attempt: ${githubRunAttempt})`;
            const commentBody = `### Build Output\n\n**Summary:**\n${decoratedSummaryLine}\n\n${markdownTable}\n\n${buildInfo}\n`;
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });
            await core.summary.addRaw(commentBody, true).write();
